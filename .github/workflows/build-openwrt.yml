name: 编译immortalwrt

on:
  watch:
    types: [started]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor == 'dfh1949'

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 安装依赖
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
          libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
          ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
          python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          
    - name: 缓存
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl/
          ~/.ccache/
        key: ${{ runner.os }}-openwrt-feeds-${{ hashFiles('openwrt/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-feeds-

    - name: Clone OpenWrt source
      run: |
        git clone --depth=1 --branch master https://github.com/immortalwrt/immortalwrt.git openwrt
        cd openwrt

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 复制配置文件
      run: |
        cd openwrt
        # 生成默认配置，确保基于目标设备
        make defconfig
        # 应用 diffconfig（包选择等）
        if [ -f ../diffconfig ]; then
          cat ../diffconfig >> .config
          make defconfig  # 再次展开，确保依赖完整
        fi

    - name: 复制内核文件
      run: |
        cd openwrt
        # 替换为你的 target，如 ath79/generic
        if [ -f ../kconfig ]; then
          cp ../kconfig target/linux/rockchip/armv8/config-6.12
        fi
        # 验证 kernel config 是否应用（非交互式）
        if [ -f target/linux/rockchip/armv8/config-6.12 ]; then
          echo "Kernel config applied:"
          head -n 10 target/linux/rockchip/armv8/config-6.12
        fi

    - name: 自定义配置文件
      run: |
        cd openwrt
        # 复制自定义 files 目录（包含网络配置）
        if [ -d ../files ]; then
          cp -r ../files .
        fi
        # 验证 network config 是否应用
        if [ -f files/etc/config/network ]; then
          echo "Network config applied:"
          cat files/etc/config/network
        fi

    - name: 下载依赖
      run: |
        cd openwrt
        make download prepare -j$(nproc) V=s

    - name: 编译
      run: |
        cd openwrt
        make -j$(nproc) V=s

    - name: 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: openwrt/bin/target/linux/rockchip/armv8/*.img.gz
        retention-days: 30
        
    # 可选步骤：清理工作空间（如果需要）
    - name: 清理工作空间
      if: always() # 无论成功与否都执行
      run: |
        cd openwrt
        make clean # 清理编译生成的文件，但保留下载的源码
