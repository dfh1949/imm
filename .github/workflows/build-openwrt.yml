name: 编译immortalwrt

on:
  watch:
    types: [started]
  workflow_dispatch:

jobs:
  OpenWrt_Builder:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    if: github.actor == 'dfh1949'

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 安装依赖
      run: |
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: 检查空间
      run: df -hT

    - name: 释放空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 再次检查空间
      run: df -hT

    - name: Clone OpenWrt master
      run: |
        git clone -b master --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt.git openwrt
        cd openwrt
        echo "当前分支: $(git rev-parse --abbrev-ref HEAD)"

    - name: 更新安装feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 检查并应用配置文件
      run: |
        cd openwrt
        echo "=============================="
        if [ -f ../config/diffconfig ]; then
          echo "✅ 已找到 config/defconfig"
          cp ../config/diffconfig .config
          make defconfig
        else
          echo "⚠️ 未找到 config/diffconfig，使用默认配置"
          make defconfig
        fi

        if [ -f ../config/kconfig ]; then
          echo "✅ 已找到 config/kconfig"
          cp ../config/kconfig target/linux/rockchip/armv8/config-6.12
        else
          echo "⚠️ 未找到 config/kconfig，跳过内核配置"
        fi
        echo "=============================="

    - name: 自定义配置文件
      run: |
        cd openwrt
        if [ -d ../files ]; then
          echo "✅ 检测到 files 目录，已复制"
          cp -r ../files .
        fi

    - name: 下载依赖
      timeout-minutes: 60
      run: |
        cd openwrt
        export WGET_FLAGS="--tries=3 --timeout=30 --retry-connrefused --waitretry=5 --read-timeout=30"
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译
      timeout-minutes: 180
      run: |
        cd openwrt
        make -j4 V=s

    # 检测是否编译成功
    - name: 检测是否编译成功
      run: |
        ls openwrt/bin/targets/rockchip/armv8
        echo "编译完成。"

    # 上传固件
    - name: 上传全部
      uses: actions/upload-artifact@v4
      with:
       name: openwrt-firmware
       path: openwrt/bin/targets/rockchip/armv8/*
       retention-days: 30

    # 上传固件
    - name: 上传固件
      uses: actions/upload-artifact@v4
      with:
       name: openwrt-bin
       path: openwrt/bin/targets/rockchip/armv8/*.gz
       retention-days: 30
